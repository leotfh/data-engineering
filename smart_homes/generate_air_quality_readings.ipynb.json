{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b768b19f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import random\n",
    "import time\n",
    "from datetime import datetime\n",
    "import xml.etree.ElementTree as ET\n",
    "from xml.dom import minidom\n",
    "\n",
    "# Create output directory\n",
    "output_dir = \"sensor_data/xml\"\n",
    "os.makedirs(output_dir, exist_ok=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "606bceaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to generate random air quality data\n",
    "def generate_air_quality_data(sensor_id=3):\n",
    "    return {\n",
    "        \"sensor_id\": sensor_id,\n",
    "        \"timestamp\": datetime.now().isoformat(),\n",
    "        \"pm2_5\": round(random.uniform(0, 250), 2),\n",
    "        \"pm10\": round(random.uniform(0, 500), 2),\n",
    "        \"so2\": round(random.uniform(0, 300), 2),\n",
    "        \"no2\": round(random.uniform(0, 500), 2)\n",
    "    }\n",
    "\n",
    "# Function to save data as XML\n",
    "def save_air_quality_xml(filename, data):\n",
    "    root = ET.Element(\"AirQualityReadings\")\n",
    "    for reading in data:\n",
    "        reading_elem = ET.SubElement(root, \"Reading\")\n",
    "        for key, value in reading.items():\n",
    "            elem = ET.SubElement(reading_elem, key)\n",
    "            elem.text = str(value)\n",
    "    # Convert to string and pretty-print\n",
    "    rough_string = ET.tostring(root, 'utf-8')\n",
    "    reparsed = minidom.parseString(rough_string)\n",
    "    pretty_xml = reparsed.toprettyxml(indent=\"  \")\n",
    "\n",
    "    # Save to file\n",
    "    filepath = os.path.join(output_dir, filename)\n",
    "    with open(filepath, \"w\", encoding=\"utf-8\") as f:\n",
    "        f.write(pretty_xml)\n",
    "\n",
    "    print(f\"Saved Air Quality XML: {filepath}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6450eb89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'sensor_id': 3, 'timestamp': '2025-03-22T16:59:52.696569', 'pm2_5': 34.27, 'pm10': 47.41, 'so2': 22.74, 'no2': 161.58}\n",
      "{'sensor_id': 3, 'timestamp': '2025-03-22T16:59:53.697724', 'pm2_5': 170.57, 'pm10': 252.94, 'so2': 220.38, 'no2': 129.98}\n",
      "Saved Air Quality XML: sensor_data/xml\\air_quality_readings.xml\n"
     ]
    }
   ],
   "source": [
    "# User input for number of times to run\n",
    "num_iterations = int(input(\"Enter number of air quality readings to generate: \"))\n",
    "\n",
    "# Generate multiple batches of air quality data\n",
    "readings = []\n",
    "for i in range(num_iterations):\n",
    "    air_quality_data = generate_air_quality_data()\n",
    "    print(air_quality_data)\n",
    "    readings.append(air_quality_data)\n",
    "    time.sleep(1)  # Simulate real-time data generation\n",
    "\n",
    "# Save all air quality data as a single XML file\n",
    "save_air_quality_xml(\"air_quality_readings.xml\", readings)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
